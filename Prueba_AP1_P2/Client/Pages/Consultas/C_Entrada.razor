@page "/ConsultaEntradas"
@inject HttpClient httpClient

<div class="container">
    <div class="row justify-content-start">
        <div class="col-12 col-md-10 col-lg-9">
            <div class="card">
                <div class="card-header">
                    <h1 class="h4">Consulta Entradas</h1>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Desde:</label>
                            <InputDate @bind-Value="Desde" class="form-control"></InputDate>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Hasta:</label>
                            <InputDate @bind-Value="Hasta" class="form-control"></InputDate>
                        </div>
                        <div class="col-12 mb-3">
                            <div class="row">
                                <label class="col-12">Filtrar por</label>
                                <div class="col-md-6 col-lg-4 mb-3">
                                    <InputSelect class="form-select" @bind-Value="opciones">
                                        <option value="0" selected>ID</option>
                                        <option value="1">Cantidad producida</option>
                                        <option value="2">Concepto</option>
                                        <option value="3">PesoTotal</option>
                                        <option value="4">Producto ID</option>
                                    </InputSelect>
                                </div>
                                <div class="col-md-6 col-lg-4 input-group">
                                    <button class="btn btn-primary" type="button" @onclick="Buscar">
                                        <span class="oi oi-magnifying-glass"></span> Buscar
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-12 mb-3">
                            <div class="row">
                                <div class="col">
                                    @switch (opciones)
                                    {
                                        case 0:
                                            <InputNumber class="form-control" @bind-Value="entradasAux.EntradaId"></InputNumber>
                                            break;
                                        case 1:
                                            <InputNumber class="form-control" @bind-Value="entradasAux.CantidadProducida"></InputNumber>
                                            break;
                                        case 2:
                                            <InputText class="form-control" @bind-Value="entradasAux.Concepto"></InputText>
                                            break;
                                        case 3:
                                            <InputNumber class="form-control" @bind-Value="entradasAux.PesoTotal"></InputNumber>
                                            break;
                                        case 4:
                                            <InputNumber class="form-control" @bind-Value="entradasAux.ProductoId"></InputNumber>
                                            break;
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered table-striped">
                            <thead>
                                <tr class="table-secondary">
                                    <th>ID</th>
                                    <th>Canitdad producida</th>
                                    <th>Concepto</th>
                                    <th>Fecha</th>
                                    <th>Peso total</th>
                                    <th>Producto Id</th>
                                    <th>Ver</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var tabla in Entradas)
                                {
                                    <tr>
                                        <td>@tabla.EntradaId</td>
                                        <td>@tabla.CantidadProducida</td>
                                        <td>@tabla.Concepto</td>
                                        <td>@tabla.Fecha.ToString("MM/dd/yyyy")</td>
                                        <td>@tabla.PesoTotal</td>
                                        <td>@tabla.ProductoId</td>
                                        <td><a href="RegistroEntradas/@tabla.EntradaId">Ver</a></td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <th>Conteo: @Conteo</th>
                                    <th></th>
                                    <th></th>
                                    <th></th>
                                    <th>Suma Peso Total: @SumaPesoTotal</th>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public List<Entradas> Entradas { get; set; } = new List<Entradas>();

    public int ID { get; set; }
    public Entradas entradasAux = new();
    public int Conteo;
    public int opciones;
    public double SumaPesoTotal;
    public DateTime Desde { get; set;}
    public DateTime Hasta { get; set; }

    protected override void OnInitialized()
    {
        Desde = DateTime.Now.AddMonths(-1);
        Hasta = DateTime.Now;
    }

    public async Task Buscar()
    {
        switch (opciones)
        {
            case 0:
                if (entradasAux.EntradaId == 0)
                {
                    Entradas = (await httpClient.GetFromJsonAsync<List<Entradas>>($"api/Entradas"))!.Where(t => t.Fecha.Date >= Desde.Date && t.Fecha.Date <= Hasta.Date).ToList();
                    StateHasChanged();
                }
                else
                {
                    Entradas = (await httpClient.GetFromJsonAsync<List<Entradas>>($"api/Entradas"))!.Where(t => t.EntradaId == entradasAux.EntradaId && t.Fecha.Date >= Desde.Date && t.Fecha.Date <= Hasta.Date).ToList();
                    StateHasChanged();
                }
                break;

            case 1:
                if ((entradasAux.CantidadProducida <= 0))
                {
                    Entradas = (await httpClient.GetFromJsonAsync<List<Entradas>>($"api/Entradas"))!.Where(t => t.Fecha.Date >= Desde.Date && t.Fecha.Date <= Hasta.Date).ToList();
                    StateHasChanged();
                }
                else
                {
                    Entradas = (await httpClient.GetFromJsonAsync<List<Entradas>>($"api/Entradas"))!.Where(t => t.CantidadProducida == entradasAux.CantidadProducida
                    && t.Fecha.Date >= Desde.Date && t.Fecha.Date <= Hasta.Date).ToList();
                    StateHasChanged();
                }
                break;

            case 2:
                if (string.IsNullOrEmpty(entradasAux.Concepto))
                {
                    Entradas = (await httpClient.GetFromJsonAsync<List<Entradas>>($"api/Entradas"))!.Where(t => t.Fecha.Date >= Desde.Date && t.Fecha <= Hasta.Date).ToList();
                    StateHasChanged();
                }
                else
                {
                    Entradas = (await httpClient.GetFromJsonAsync<List<Entradas>>($"api/Entradas"))!.Where(t => t.Concepto!
                        .Contains(entradasAux.Concepto, StringComparison.OrdinalIgnoreCase)
                        && t.Fecha >= Desde.Date && t.Fecha <= Hasta).ToList();
                    StateHasChanged();
                }
                break;

            case 3:
                if ((entradasAux.PesoTotal <= 0))
                {
                    Entradas = (await httpClient.GetFromJsonAsync<List<Entradas>>($"api/Entradas"))!.Where(t => t.Fecha.Date >= Desde.Date && t.Fecha.Date <= Hasta.Date).ToList();
                    StateHasChanged();
                }
                else
                {
                    Entradas = (await httpClient.GetFromJsonAsync<List<Entradas>>($"api/Entradas"))!.Where(t => t.PesoTotal == entradasAux.PesoTotal
                    && t.Fecha.Date >= Desde.Date && t.Fecha.Date <= Hasta.Date).ToList();
                    StateHasChanged();
                }
                break;

            case 4:
                if (entradasAux.ProductoId <= 0)
                {
                    Entradas = (await httpClient.GetFromJsonAsync<List<Entradas>>($"api/Entradas"))!.Where(t => t.Fecha.Date >= Desde.Date && t.Fecha.Date <= Hasta.Date).ToList();
                    StateHasChanged();
                }
                else
                {
                    Entradas = (await httpClient.GetFromJsonAsync<List<Entradas>>($"api/Entradas"))!.Where(t => t.ProductoId == entradasAux.ProductoId
                        && t.Fecha.Date >= Desde.Date && t.Fecha <= Hasta.Date).ToList();
                    StateHasChanged();
                }
                break;
        }
        Conteo = Entradas != null ? Entradas!.Count() : 0;
        SumaPesoTotal = Entradas != null ? Entradas.Sum(t => t.PesoTotal) : 0;
    }
}
