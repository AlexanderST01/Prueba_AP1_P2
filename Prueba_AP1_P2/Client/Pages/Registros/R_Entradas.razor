@page "/RegistroEntradas"
@page "/RegistroEntradas/{EntradaId:int}"
@inject NotificationService notificationService
@inject HttpClient httpClient
<EditForm Model="Entradas" OnValidSubmit="Guardar">
    <DataAnnotationsValidator/>

    <div class="row">
       <div class="col-8">
            <div class="card">
                <div class="card-header">
                    <h1>Entradas de productos Empacados</h1>
                </div>
                <div class="card-body">
                    <div class="row">
                        <label>Entrada ID:</label>
                        <div class=" col-auto  mb-3">
                            <InputNumber @bind-Value="Entradas.EntradaId" class="form-control"></InputNumber>
                            <ValidationMessage For="@(() => Entradas.EntradaId)" />
                        </div>
                        <div class="col">
                            <button type="button" class="btn btn-primary oi oi-magnifying-glass" @onclick="Buscar"></button>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <label>Fecha: </label>
                            <InputDate @bind-Value="Entradas.Fecha" class="form-control"></InputDate>
                            <ValidationMessage For="@(() => Entradas.Fecha)" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <label>Concepto:</label>
                            <InputText @bind-Value="Entradas.Concepto" class="form-control"></InputText>
                            <ValidationMessage For="@(() => Entradas.Concepto)" />
                        </div>
                    </div>
                    <br />

                    <div class="card card">
                        <fieldset>
                            <div class="card-header">
                                <h3>Utilizados</h3>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <label>Producto: </label>
                                        <InputSelect @bind-Value="EntredasDetalle.ProductoId" class="form-select">                                    
                                        @foreach (var item in Productos)
                                            {
                                                @if(item.Tipo == 0)
                                                {
                                                    <option value="@item.ProductoId">@item.Descripcion</option>
                                                }
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => EntredasDetalle.DetalleId)" />
                                    </div>
                                    <div class="col-md-5">
                                        <label>Cantidad</label>
                                        <div class="row"
                                            <div class="col">
                                                <div class="input-group">
                                                    <InputNumber @bind-Value="EntredasDetalle.CantidadUtilizada" class="form-control"></InputNumber>
                                                    <button type="button" class="btn btn-success" @onclick="AgregarDetalle">Agregar <i class="oi oi-plus" /></button>
                                                    <ValidationMessage For="@(() => EntredasDetalle.CantidadUtilizada)" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                               <div class="row"> 
                                   <div class="col">
                                        <table class="table">
                                            <thead>
                                                <tr>
                                                    <th>ProductoID</th>
                                                    <th>Descripci&oacute;n</th>
                                                    <th>Cantidad</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var item in this.Entradas.EntredasDetalles)
                                                {
                                                    <tr>
                                                    <td>@item.ProductoId</td>
                                                    <td>@ObtenerDescripcion(item.ProductoId)</td>
                                                    <td>@item.CantidadUtilizada g</td>
                                                        <td><button type="button" class="btn btn-danger" @onclick=@(() => RemoveDatalle(item))><i class="oi oi-trash" /></button></td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                   </div>
                               </div>                           
                                <div class="row justify-content-between">
                                    <div class="col-2">
                                        <label>Peso Total:</label>
                                    <input @bind-value="PesoTotal" class="form-control" disabled />
                                    </div>
                                </div>
                            </div>
                        </fieldset>
                    </div>
                    <br />

                    <fieldset >
                        <legend>Producido</legend>
                        <div class="row">
                            <div class="col-3">
                                <InputSelect @bind-Value="Entradas.ProductoId" class="form-select" @onblur="VerificarSeleccionadoProducion">
                                    <option value="0">Opciones</option>
                                    @foreach (var item in Productos)
                                    {
                                        @if (item.Tipo == 1)
                                        {
                                            <option value="@item.ProductoId">@item.Descripcion</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => EntredasDetalle.DetalleId)" />
                            </div>
                            <div class="col-2">
                                <InputNumber @bind-Value="Entradas.CantidadProducida" class="form-control" @oninput="ValidarProducido"></InputNumber>
                            </div>
                        </div>
                    </fieldset>

                </div>
                <div class="card-footer">
                    <div class="card-footer text-center">
                        <button type="button" class="btn btn-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file" /></button>
                        <button class="btn btn-success">Guardar <i class="oi oi-document" /></button>
                        <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar <i class="oi oi-trash" /></button>
                    </div>
                </div>
            </div>
       </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int EntradaId { get; set; }
    public EntredasDetalle EntredasDetalle { get; set; } = new();
    public Entradas Entradas { get; set; } = new Entradas();
    public List<Productos> Productos { get; set; } = new List<Productos>();
    public Productos Producidos { get; set; } = new Productos();
    public List<Entradas> ListEntradas { get; set; } = new();
    public List<EntredasDetalle> DetallesEliminados { get; set; } = new();
    public List<EntredasDetalle> DetallesAgregado { get; set; } = new();
    public List<EntredasDetalle> ReduccionProductos { get; set; } = new();
    public bool MPP5 { get; set; } = false;
    public bool MPP2 { get; set; } = false;
    public bool MPC5 { get; set; } = false;
    public bool ValidacionEntro { get; set; } = false;
    public double PesoTotal { get; set; }
    public int id = 0;

    protected override  async void OnInitialized()
    {
        var productos = await httpClient.GetFromJsonAsync<List<Productos>>("api/Productos");
        if (productos is not null)
        {
            Productos = productos;
            EntredasDetalle.ProductoId = productos.First().ProductoId;
        }

        if (EntradaId > 0)
        {
            Entradas.EntradaId = EntradaId;
            await Buscar();
        }
        StateHasChanged();
    }

    public async Task Guardar()
    {
        if (await ValidarProducido()) ///arreglar que pueda guardar sin necesidad de agregar un detalle
        {
            Entradas.PesoTotal = PesoTotal;

            var listEntradas = await httpClient.GetFromJsonAsync<List<Entradas>>("api/Entradas");
            var entradaAux = listEntradas.FirstOrDefault(e => e.EntradaId == Entradas.EntradaId);
            var ListProductos = await httpClient.GetFromJsonAsync<List<Productos>>("api/Productos");

            if(entradaAux is not null)
            {               
                var CantidadProducidoMayor = (entradaAux.CantidadProducida < Entradas.CantidadProducida) && Entradas.ProductoId >= 5;
                if (CantidadProducidoMayor)
                {
                    var aumentrar = ListProductos.FirstOrDefault(p => p.ProductoId == Entradas.ProductoId);
                    aumentrar.Existencia = aumentrar.Existencia + (Entradas.CantidadProducida - entradaAux.CantidadProducida);
                    using var responseDetalleAgregado = await httpClient.PutAsJsonAsync<Productos>($"api/Productos/{aumentrar.ProductoId}", aumentrar);
                }

                var CantidadProducidoMenor = (entradaAux.CantidadProducida > Entradas.CantidadProducida) && Entradas.ProductoId >= 5;
                if (CantidadProducidoMenor)
                {
                    var disminuir = ListProductos.FirstOrDefault(p => p.ProductoId == Entradas.ProductoId);
                    disminuir.Existencia = disminuir.Existencia - (entradaAux.CantidadProducida - Entradas.CantidadProducida);
                    using var responseDetalleAgregado = await httpClient.PutAsJsonAsync<Productos>($"api/Productos/{disminuir.ProductoId}", disminuir);
                }
            }

            else if(Entradas.ProductoId >=5)
            {
                var aumentar = ListProductos.FirstOrDefault(p => p.ProductoId == Entradas.ProductoId);
                aumentar.Existencia = aumentar.Existencia + Entradas.CantidadProducida;
                using var responseDetalleAgregado = await httpClient.PutAsJsonAsync<Productos>($"api/Productos/{aumentar.ProductoId}", aumentar);
            }

            using var response = await httpClient.PostAsJsonAsync("api/Entradas", Entradas);
            if (!response.IsSuccessStatusCode)
            {
                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Erro ",
                        Detail = "Entrada no guardada",
                        Duration = 5_000
                    };
                notificationService.Notify(mensaje);
                return;
            }
            var entradasDevuelta = await response.Content.ReadFromJsonAsync<Entradas>();

            var cambiosCatidad = entradasDevuelta.CantidadProducida == Entradas.CantidadProducida;

            if (entradasDevuelta is not null)//lo puedo quitar
            {
                if (DetallesEliminados != null)//lo puedo quitar
                {
                    foreach (var item in DetallesEliminados)
                    {
                        if (DetallesAgregado.Any(d => d.DetalleId == item.DetalleId))
                        {
                            DetallesEliminados.Remove(item);
                            DetallesAgregado.Remove(item);
                        }
                    }
                }

                Entradas = entradasDevuelta;

                if (DetallesEliminados.Count > 0)
                {
                    foreach (var item in DetallesEliminados)
                    {
                        await httpClient.DeleteAsync($"api/Entradas/DeleteDetalles/{item.DetalleId}");
                        var disminuir = Productos.FirstOrDefault(p => p.ProductoId == item.ProductoId);
                        disminuir.Existencia = disminuir.Existencia + item.CantidadUtilizada;
                        using var responseDetalleEliminado = await httpClient.PutAsJsonAsync<Productos>($"api/Productos/{disminuir.ProductoId}", disminuir);
                    }
                }

                if (DetallesAgregado.Count > 0)
                {
                    foreach (var item in DetallesAgregado)
                    {
                        var disminuir = Productos.FirstOrDefault(p => p.ProductoId == item.ProductoId);
                        disminuir.Existencia = disminuir.Existencia - item.CantidadUtilizada;
                        using var responseDetalleAgregado = await httpClient.PutAsJsonAsync<Productos>($"api/Productos/{disminuir.ProductoId}", disminuir);
                    }
                }

                StateHasChanged();
                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Guardado ",
                        Detail = "Entradas guardado",
                        Duration = 5_000
                    };
                notificationService.Notify(mensaje);
                Nuevo();
            }
        }

        else if (ValidacionEntro)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Advertencia guardar ",
                    Detail = "Antes de guardar debes de terminar de agregar los detalles faltantes para producir un producto mixto",
                    Duration = 5_000
                };
            notificationService.Notify(mensaje);            
        }
    }

    public  void Nuevo()
    {
        MPP5 = false;
        MPP2 = false;
        MPC5 = false;
        Entradas = new();
        EntredasDetalle = new();
        DetallesAgregado = new();

        var mensaje = new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Nuevo ",
                Detail = "Puedes escribir una nueva Entrada",
                Duration = 5_000
            };
        notificationService.Notify(mensaje);

        PesoTotal = 0;
        DetallesEliminados = new();
        return;
    }

    public async Task Buscar()
    {
        DetallesAgregado = new();
        DetallesEliminados = new();
        var entradasNotNull = (await httpClient.GetFromJsonAsync<List<Entradas>>($"api/Entradas"))
        .ToList().Any(e => e.EntradaId == Entradas.EntradaId);

        if(entradasNotNull)
        {
            var entradasEncontrada = await httpClient.GetFromJsonAsync<Entradas>($"api/Entradas/{Entradas.EntradaId}");
            if(entradasEncontrada != null)
            {
                Entradas = entradasEncontrada;
                PesoTotal = Entradas.EntredasDetalles.Sum(ed => ed.CantidadUtilizada);
                StateHasChanged();
            }
        }

        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error Entradas",
                    Detail = "Entradas no encontrada",
                    Duration = 5_000
                };
            notificationService.Notify(mensaje);
        }
    }

    public async Task Eliminar()
    {
        var producidoHaCambido = await httpClient.GetFromJsonAsync<List<Entradas>>("api/Entradas");

        // if (await ValidarProducido())
        if (producidoHaCambido.FirstOrDefault(p => p.EntradaId == Entradas.EntradaId).CantidadProducida == Entradas.CantidadProducida)
        {
            using var response = await httpClient.DeleteAsync($"api/Entradas/{Entradas.EntradaId}");
            if (!response.IsSuccessStatusCode)
            {
                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Eliminado ",
                        Detail = "No haz podido eliminar Entradas",
                        Duration = 5_000
                    };
                notificationService.Notify(mensaje);
                return;
            }
            else
            {

                var aumentar = Productos.FirstOrDefault(p => p.ProductoId == Entradas.ProductoId);
                aumentar.Existencia = aumentar.Existencia - Entradas.CantidadProducida;
                await httpClient.PutAsJsonAsync<Productos>($"api/Productos/{aumentar.ProductoId}", aumentar);

                foreach (var item in Entradas.EntredasDetalles)
                {
                    var aumentarDetalle = Productos.FirstOrDefault(p => p.ProductoId == item.ProductoId);
                    aumentarDetalle.Existencia = aumentarDetalle.Existencia + item.CantidadUtilizada;
                    using var responseDetalleAgregado = await httpClient.PutAsJsonAsync<Productos>($"api/Productos/{aumentarDetalle.ProductoId}", aumentarDetalle);
                }


                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Eliminado ",
                        Detail = "Haz podido eliminar Entradas",
                        Duration = 5_000
                    };
                notificationService.Notify(mensaje);
                Nuevo();
            }
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error ",
                    Detail = "Haz modificado la cantidad producidad",
                    Duration = 5_000
                };
            notificationService.Notify(mensaje);            
        }
    }

    public async Task AgregarDetalle()
    {
        if (ValidarDetalle())
        {
            var producto = await BuscarProductos(EntredasDetalle.ProductoId);
            if(producto != null)
            {
                if (EntredasDetalle.CantidadUtilizada > producto.Existencia)
                {
                    var mensaje = new NotificationMessage
                                {
                                    Severity = NotificationSeverity.Error,
                                    Summary = "Error",
                                    Detail = $"En el inventario no hay suficiente para abasteser {producto.Descripcion}: {EntredasDetalle.CantidadUtilizada}",
                                    Duration = 4_000
                                };
                    notificationService.Notify(mensaje);
                    return;
                }
            }

            var encontrado = await httpClient.GetFromJsonAsync<List<EntredasDetalle>>($"api/Entradas");
            var Existe = encontrado.Any(e => e.DetalleId == EntredasDetalle.DetalleId);

            EntredasDetalle.EntradaId = Entradas.EntradaId;

            if (DetallesEliminados.Any(d => d.DetalleId == EntredasDetalle.DetalleId))
                DetallesEliminados.Remove(EntredasDetalle);

            if (Existe)
                DetallesAgregado.Add(EntredasDetalle);

            Entradas.EntredasDetalles.Add(EntredasDetalle);
            EntredasDetalle = new EntredasDetalle();
            PesoTotal = Entradas.EntredasDetalles.Sum(ed => ed.CantidadUtilizada);
            ValidarProducido();
        }
        StateHasChanged();
    }

    private async Task<Entradas> BuscarEntradas(int entradasId)
    {
        Entradas entradas = new();
        var entradasEncontrada = await httpClient.GetFromJsonAsync<Entradas>($"api/Entradas/{entradasId}");

        if (entradasEncontrada != null)
            return entradas = entradasEncontrada;

        return new Entradas();
    }

    private async Task RemoveDatalle(EntredasDetalle detalle)
    {
        EntredasDetalle = detalle;
        EntredasDetalle.ProductoId = detalle.ProductoId;
        Entradas.EntredasDetalles.Remove(detalle);
        PesoTotal = Entradas.EntredasDetalles.Sum(ed => ed.CantidadUtilizada);

        if (DetallesAgregado.Any(d => d.DetalleId == detalle.DetalleId))
            DetallesAgregado.Remove(detalle);

        DetallesEliminados.Add(detalle);

        StateHasChanged();

    }

    public async Task<string> ObternerDescripcionAsync (int Id)
    {
        var prod = await httpClient.GetFromJsonAsync<Productos>($"api/Productos/{Id}");
        return prod.Descripcion;
    }

    public async Task<int> ObtenerProductoId(int detalleId)
    {
        var detalle = await httpClient.GetFromJsonAsync<List<EntredasDetalle>>("api/Entradas");
        return detalle.Where(ed => ed.DetalleId == detalleId).FirstOrDefault().ProductoId;
    }

    private async Task<Productos> BuscarProductos(int ProductoId)
    {
        var producto = await httpClient.GetFromJsonAsync<Productos>($"api/Productos/{ProductoId}");

        return producto ?? new Productos();
    }

    public string? ObtenerDescripcion(int Id)
    {
        var productos = Productos.FirstOrDefault(t => t.ProductoId == Id);
        return productos.Descripcion;
    }

    public async Task<bool> ValidarProducido()
    {
        MPP5 = false;
        MPP2 = false;
        MPC5 = false;
        ValidacionEntro = false;

        if(Entradas.ProductoId == 5)
        {
            var mani = Entradas.EntredasDetalles.Where(p => p.ProductoId == 1).Sum(s => s.CantidadUtilizada);
            var pistacho = Entradas.EntredasDetalles.Where(p => p.ProductoId == 2).Sum(s => s.CantidadUtilizada);
            var pasas = Entradas.EntredasDetalles.Where(p => p.ProductoId == 3).Sum(s => s.CantidadUtilizada);

            for(int i = 0; i < Entradas.CantidadProducida; i++) 
            {
                if (mani < 75.60)
                {
                    var mensaje = new NotificationMessage
                                {
                                    Severity = NotificationSeverity.Error,
                                    Detail = $"Te faltan gramos de pistacho para el producto mixto",
                                    Summary = "Maní ",
                                    Duration = 5_000
                                };
                    notificationService.Notify(mensaje);
                }

                if (pistacho < 75.60)
                {
                    var mensaje = new NotificationMessage
                                {
                                    Severity = NotificationSeverity.Error,
                                    Summary = "Pistacho ",
                                    Detail = $"Te faltan gramos de pistacho para el producto mixto",
                                    Duration = 5_000
                                };
                    notificationService.Notify(mensaje);
                }

                if (pasas < 75.60)
                {
                    var mensaje = new NotificationMessage
                                {
                                    Severity = NotificationSeverity.Error,
                                    Summary = "Pasas ",
                                    Detail = $"Te faltan gramos de pasa para el producto mixto",
                                    Duration = 5_000
                                };
                    notificationService.Notify(mensaje);
                }

                MPP5 = (mani >= 75.60 && pistacho >= 75.60 && pasas >= 75.60);

                if (MPP5)
                {
                    Producidos = Productos.FirstOrDefault(p => p.ProductoId == 5)!;
                    Producidos.Existencia = Entradas.CantidadProducida;
                    mani -= 75.60;
                    pistacho -= 75.60;
                    pasas -= 75.60;
                }
                else
                {
                    break;
                }
            }
            ValidacionEntro = true;
        }

        if (Entradas.ProductoId == 6)
        {
            var mani = Entradas.EntredasDetalles.Where(m => m.ProductoId == 1).Sum(s => s.CantidadUtilizada);
            var pistacho = Entradas.EntredasDetalles.Where(m => m.ProductoId == 2).Sum(s => s.CantidadUtilizada);
            var pasas = Entradas.EntredasDetalles.Where(m => m.ProductoId == 3).Sum(s => s.CantidadUtilizada);
            var ciruelas = Entradas.EntredasDetalles.Where(m => m.ProductoId == 4).Sum(s => s.CantidadUtilizada);

            for (int i = 0; i < Entradas.CantidadProducida; i++)
            {
                if (mani < 75.60)
                {
                    var mensaje = new NotificationMessage
                            {
                                Severity = NotificationSeverity.Error,
                                Summary = "Maní ",
                                Detail = $"Te faltan gramos de maní para el producto mixto",
                                Duration = 5_000
                            };
                    notificationService.Notify(mensaje);
                }

                if (pistacho < 75.60 )
                {
                    if(pasas > 75.60)
                    {
                        var mensaje = new NotificationMessage
                            {
                                Severity = NotificationSeverity.Error,
                                Summary = "Pistacho ",
                                Detail = $"Te faltan gramos de pistacho para el producto mixto",
                                Duration = 5_000
                            };
                        notificationService.Notify(mensaje);
                    }    

                    if (pasas < 75.60)
                    {
                        var mensajes = new NotificationMessage
                            {
                                Severity = NotificationSeverity.Error,
                                Summary = "Pistacho o Posas",
                                Detail = $"Te faltan gramos de pasas para el producto mixto",
                                Duration = 5_000
                            };
                        notificationService.Notify(mensajes);
                    }
                }

                if (ciruelas < 75.60)
                {
                    var mensaje = new NotificationMessage
                            {
                                Severity = NotificationSeverity.Error,
                                Summary = "Ciruelas ",
                                Detail = $"Te faltan gramos de ciruelas para el producto mixto",
                                Duration = 5_000
                            };
                    notificationService.Notify(mensaje);
                }

                MPC5 = (mani >= 75.60 && (pistacho >= 75.60 || pasas >= 75.60) && ciruelas >= 75.60);

                if (MPC5)
                {
                    Producidos = Productos.FirstOrDefault(p => p.ProductoId == 5)!;
                    Producidos.Existencia = Entradas.CantidadProducida;
                    mani -= 75.60;
                    pistacho -= 75.60;
                    pasas -= 75.60;
                    ciruelas -= 75.60;
                }
                else
                {
                    break;
                }
            }
            ValidacionEntro = true;
        }

        if (Entradas.ProductoId == 7)
        {
            var mani = Entradas.EntredasDetalles.Where(p => p.ProductoId == 1).Sum(s => s.CantidadUtilizada);
            var pistacho = Entradas.EntredasDetalles.Where(p => p.ProductoId == 2).Sum(s => s.CantidadUtilizada);
            var pasas = Entradas.EntredasDetalles.Where(p => p.ProductoId == 3).Sum(s => s.CantidadUtilizada);

            for (int i = 0; i < Entradas.CantidadProducida; i++)
            {
                if (mani < 30.24)
                {
                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Maní ",
                            Detail = $"Te faltan gramos de maní para el producto mixto",
                            Duration = 5_000
                        };
                    notificationService.Notify(mensaje);
                }

                if (pistacho < 30.24)
                {
                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Pistacho ",
                            Detail = $"Te faltan gramos de pistacho para el producto mixto",
                            Duration = 5_000
                        };
                    notificationService.Notify(mensaje);
                }

                if (pasas < 30.24)
                {
                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Pasas ",
                            Detail = $"Te faltan gramos de pasa para el producto mixto",
                            Duration = 5_000
                        };
                    notificationService.Notify(mensaje);
                }

                MPP2 = (mani >= 30.24 && pistacho >= 30.24 && pasas >= 30.24);

                if (MPP2)
                {
                    Producidos = Productos.FirstOrDefault(p => p.ProductoId == 7);
                    Producidos.Existencia = Entradas.CantidadProducida;
                    mani -= 30.24;
                    pistacho -= 30.24;
                    pasas -= 30.24;
                }
                else
                {
                    break;
                }
            }
            ValidacionEntro = true;
        }

        if (Entradas.ProductoId < 5) // quito este if y no deja pasar sinque agregues un producido
            return true;

        return MPC5 || MPP5 || MPP2;

    }

    private async Task VerificarSeleccionadoProducion()
    {
        if (Entradas.CantidadProducida <= 0)     
            return;

        Entradas.CantidadProducida = 0;

        ValidarProducido();
    }

    public bool ValidarDetalle()
    {
        var detallesNotNull = EntredasDetalle.ProductoId > 0 && EntredasDetalle.CantidadUtilizada > 0;
        if (!detallesNotNull)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error ",
                    Detail = "Debes de elegir un producto y introducir una cantidad",
                    Duration = 5_000
                };
            notificationService.Notify(mensaje);
        }

        return detallesNotNull;
    }
}
